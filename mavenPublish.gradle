apply plugin: 'signing'

configurations {
    samples { extendsFrom runtime }
    jdk
    maven { extendsFrom archives }
    published { extendsFrom archives, signatures }
}

signing {
    required = { gradle.taskGraph.hasTask('uploadPublished') && !version.endsWith("SNAPSHOT") }
    sign configurations.archives
}

repositories {
    mavenLocal()
    maven { url 'https://oss.sonatype.org/content/groups/staging' }
    mavenCentral()
}

uploadPublished {

    doFirst {
        // configure repositories in a doFirst so we can late bind the properties
        repositories {
            mavenDeployer {
                def repoUrl = getStringProperty('publishRepositoryUrl', 'https://nexus.gluonhq.com/nexus/content/repositories/releases/');
                configurePOM(pom)
                addFilter('base') { artifact, file -> artifact.name == 'ide-plugin-templates' }
                addFilter('all') { artifact, file -> artifact.name == 'ide-plugin-templates-all' }
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                snapshotRepository(url: "https://nexus.gluonhq.com/nexus/content/repositories/snapshots/") {
                    authentication userName: gluonNexusUsername, password: gluonNexusPassword
                }
                repository(url: repoUrl) {
                    authentication userName: gluonNexusUsername, password: gluonNexusPassword
                }
                pom('all').artifactId = 'ide-plugin-templates-all'
            }
        }
    }
    configuration = configurations.published
}

install {
    doFirst {
        repositories {
            mavenInstaller {
                configurePOM(pom)
                addFilter('base') { artifact, file -> artifact.name == 'ide-plugin-templates' }
                addFilter('all') { artifact, file -> artifact.name == 'ide-plugin-templates-all' }
                pom('all').artifactId = 'ide-plugin-templates-all'
            }
        }
    }
    configuration = configurations.published
}

private configurePOM(def pom) {
    pom.project {
        name "Gluon IDE Plugin Templates"
        description "Gluon IDE Plugin Templates"
        url 'https://gluonhq.com/products/mobile/trynow/'
        modelVersion '4.0.0'
        packaging 'jar'
        organization {
            name 'Gluon'
            url 'https://gluonhq.com'
        }
    }
}

private String getStringProperty(String name, String defaultValue) {
    if (!hasProperty(name)) {
        return defaultValue
    }

    def propertyValue = getProperty(name)
    return propertyValue != null ? propertyValue.toString().trim() : defaultValue
}
