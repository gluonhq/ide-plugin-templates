import java.util.zip.ZipEntry
import java.util.zip.ZipOutputStream

def templates = [ "GluonGlisten", "GluonGlistenMulti", "GluonGlistenMultiFXML", "GluonGlistenMultiFXMLGAf"]
def templateDir = "src/main/resources/com/gluonhq/plugin/templates"

task copyTemplates {
    templates.each {templateName ->
        copy {
            from("$projectDir/$templateDir/projects/$templateName") {
                into "projects"
            }
            from("$projectDir/$templateDir/sources/$templateName") {
                into "sources"
            }
            into "$buildDir/templates/$templateName"
        }
    }
}

task packageTemplates {
    templates.each {
        def src = new File("$buildDir/templates/$it")
        def dest = new File("$buildDir/templates/$it"+".zip")
        zipDirectory(src, dest)
        project.delete(files(src))
    }
    dependsOn(copyTemplates)
}

def zipDirectory(File dir, File zipFile) throws IOException {
    FileOutputStream fout = new FileOutputStream(zipFile);
    ZipOutputStream zout = new ZipOutputStream(fout);
    zipSubDirectory("", dir, zout);
    zout.close()
    fout.close()
}

def zipSubDirectory(String basePath, File dir, ZipOutputStream zout) throws IOException {
    byte[] buffer = new byte[4096];
    File[] files = dir.listFiles();
    for (File file : files) {
        if (file.isDirectory()) {
            String path = basePath + file.getName() + "/";
            zout.putNextEntry(new ZipEntry(path));
            zipSubDirectory(path, file, zout);
            zout.closeEntry();
        } else {
            FileInputStream fin = new FileInputStream(file);
            zout.putNextEntry(new ZipEntry(basePath + file.getName()));
            int length;
            while ((length = fin.read(buffer)) > 0) {
                zout.write(buffer, 0, length);
            }
            zout.closeEntry();
            fin.close();
        }
    }
}